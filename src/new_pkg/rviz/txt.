#########bashrc_file##########
gedit ~/.bashrc
auto-completion:
source /usr/share/colcon_argcomplete/hook/colcon-argcomplete.bash
build the necessary packages:
colcon build --symlink-install
set up the environment for a specific workspace:
source install/setup.bash
#####create package#########
create pkg on ros:
ros2 pkg create name_of_pkg --build-type ament_(cmake or pyhton)
#########demo_nodes###########
(talker node)
ros2 run demo_nodes_cpp talker
(listner node)
ros2 run demo_nodes_cpp listener
(turtlesim node)
ros2 run turtlesim turtlesim_node
(teleop_key node)
ros2 run turtlesim turtle_teleop_key
##########to see communication graph########
rqt_graph
#####to create node file####
#inside pkg go inside the file that has the same name
touch name_node.py
#########inside node#############
#!/usr/bin/env python3
#tell the interperter to use python3
import rclpy
#python library to ros2
from rclpy.node import Node
class MyNode(Node):
    def __init__(self):
        super().__init__("node_name")
        #send massege when the node is activated
        self.get_logger().info("hello from ros 2")
def main(args=None):
    #the args of init are equal of ags of main
    rclpy.init(args=args)
    #any think you want you rin here
    node=MyNode()
    #shutdonw your ros communication
    rclpy.shutdown()
#here to make the code excutable from the terminal
if __name__ == '__main__':
    main()
#########on setup.py##########
entry_points={
        'console_scripts': [
            "executable_name = pkg_name.node_file_name:main",
        ],
    },
##########in package.xml##########
<depend>package_msg_name</depend>
##########run nodes########
ros2 run pkg_name excutable_name
###########node tools###########
to see the active node:
    ros2 node list
to see info of node:
    ros2 node info /node_name
###########topic tools###########
to see the active node:
    ros2 topic list
to see info of topic:
    ros2 topic info /topic_name
to know more details about the msg type:
    ros2 interface show msg_type
to know what is being sent to the topic:
    ros2 topic echo /topic_name
########publisher########
to make publisher in the node:
      self.name_of_publisher = self.create_publisher(msg_type,topic_where_to_publish,queue_size)
to publish:
     self.name_of_publisher.publish(msg)
to make the node to sill alive:
    rclpy.spin(node)
########subscribe########
to make subscriber in the node:
      self.name_of_subscriber = self.create_subscription(msg_type,topic_where_to_subscribe,self.callback_function,queue_size)
def callback_function(self.msg:type):
###########draw_node################
#!/usr/bin/env python3
#tell the interperter to use python3
import rclpy
#python library to ros2
from rclpy.node import Node
from geometry_msgs.msg import Twist
class MyNode(Node):
    def __init__(self):
        super().__init__("draw_circle")
        self.cmd_vel_pub_ = self.create_publisher(Twist,"/turtle1/cmd_vel",10)
        self.timer_ = self.create_timer(0.5,self.send_velocity_command)
        #send massege when the node is activated
        self.get_logger().info("hello from ros 2")
    def send_velocity_command(self):
        msg = Twist()
        msg.linear.x=2.0
        msg.angular.z=1.0
        self.cmd_vel_pub_.publish(msg)
def main(args=None):
    #the args of init are equal of ags of main
    rclpy.init(args=args)
    #any think you want you rin here
    node=MyNode()
    rclpy.spin(node)
    #shutdonw your ros communication
    rclpy.shutdown()
#here to make the code excutable from the terminal
if __name__ == '__main__':
    main()
###########pose_node################     
#!/usr/bin/env python3
#tell the interperter to use python3
import rclpy
#python library to ros2
from rclpy.node import Node
from turtlesim.msg import Pose
class MyNode(Node):
    def __init__(self):
        super().__init__("pose_subscriber")
        self.pose_subscribe_ = self.create_subscription(
            Pose,"/turtle1/pose",self.pose_callback,10)
    def pose_callback(self,msg:Pose):
        self.get_logger().info("("+str(msg.x)+", "+str(msg.y))
def main(args=None):
    #the args of init are equal of ags of main
    rclpy.init(args=args)
    #any think you want you rin here
    node=MyNode()
    rclpy.spin(node)
    #shutdonw your ros communication
    rclpy.shutdown()
#here to make the code excutable from the terminal
if __name__ == '__main__':
    main()       
###########pub_sub_node################ 
#!/usr/bin/env python3
#tell the interperter to use python3
import rclpy
#python library to ros2
from rclpy.node import Node
from geometry_msgs.msg import Twist
from turtlesim.msg import Pose
class MyNode(Node):
    def __init__(self):
        super().__init__("pub_sub")
        self.cmd_vel_publisher_ = self.create_publisher(
            Twist ,"/turtle1/cmd_vel",10)
        self.pose_subscriber_ = self.create_subscription(
            Pose,"/turtle1/pose",self.pose_callback,10)
        #send massege when the node is activated
        self.get_logger().info("node has been activated")
    def pose_callback(self ,pose:Pose):
        cmd =Twist()
        if pose.x >9.0 or pose.x < 2.0 or pose.y > 9.0 or pose.y < 2.0:
            cmd.linear.x = 1.0
            cmd.angular.z = 0.9
        else:
            cmd.linear.x = 5.0
            cmd.angular.z = 0.0
        self.cmd_vel_publisher_.publish(cmd)
def main(args=None):
    #the args of init are equal of ags of main
    rclpy.init(args=args)
    #any think you want you rin here
    node=MyNode()
    rclpy.spin(node)
    #shutdonw your ros communication
    rclpy.shutdown()
#here to make the code excutable from the terminal
if __name__ == '__main__':
    main()
###########ros_domain#############
export ROS_DOMAIN_ID=20